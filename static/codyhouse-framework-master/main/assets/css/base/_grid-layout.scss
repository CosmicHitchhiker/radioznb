:root {
  --max-width-xxxxs: 20rem;  // ~320px
  --max-width-xxxs:  26rem;  // ~416px
  --max-width-xxs:   32rem;  // ~512px
  --max-width-xs:    38rem;  // ~608px
  --max-width-sm:    48rem;  // ~768px
  --max-width-md:    64rem;  // ~1024px
  --max-width-lg:    80rem;  // ~1280px
  --max-width-xl:    90rem;  // ~1440px
  --max-width-xxl:   100rem; // ~1600px
  --max-width-xxxl:  120rem; // ~1920px
  --max-width-xxxxl: 150rem; // ~2400px
}

// classes used to center content on x-axis and set content max width
.container {
  width: calc(100% - 2*var(--component-padding));
  margin-left: auto;
  margin-right: auto;
}

.max-width-xxxxs { max-width: var(--max-width-xxxxs); }
.max-width-xxxs  { max-width: var(--max-width-xxxs); }
.max-width-xxs   { max-width: var(--max-width-xxs); }
.max-width-xs    { max-width: var(--max-width-xs); }
.max-width-sm    { max-width: var(--max-width-sm); }
.max-width-md    { max-width: var(--max-width-md); }
.max-width-lg    { max-width: var(--max-width-lg); }
.max-width-xl    { max-width: var(--max-width-xl); }
.max-width-xxl   { max-width: var(--max-width-xxl); }
.max-width-xxxl  { max-width: var(--max-width-xxxl); }
.max-width-xxxxl { max-width: var(--max-width-xxxxl); }
.max-width-100\% { max-width: 100%; }

// alt approach - max-width is equal to current breakpoint
$breakpointsNr: length($breakpoints);
@each $breakpoint, $value in $breakpoints {
  $i: index($breakpoints, $breakpoint $value);
  @if $i == 1 {
    [class*="max-width-adaptive"] {
      max-width: map-get($map: $breakpoints, $key: #{$breakpoint});
    }
  } @else if $i == 2 {
    @include breakpoint(#{$breakpoint}) {
      [class*="max-width-adaptive"] {
        max-width: map-get($map: $breakpoints, $key: #{$breakpoint});
      }
    }
  } @else {
    $classList : '';
    @each $subBreakpoint, $subValue in $breakpoints {
      $j: index($breakpoints, $subBreakpoint $subValue); 
      @if $j == $i {
        $classList: '.max-width-adaptive-#{$subBreakpoint}';
      } @else if $j > $i {
        $classList: $classList+', .max-width-adaptive-#{$subBreakpoint}';
      }
    }
    @if $i < $breakpointsNr {
      $classList: $classList+', .max-width-adaptive';
    } 
    @include breakpoint(#{$breakpoint}) {
      #{$classList} {
        max-width: map-get($map: $breakpoints, $key: #{$breakpoint});
      }
    }
  }
}

// --------------------------------

// Grid system

// --------------------------------

$grid-columns: 12 !default;

.grid {
  --gap: 0px;
  --offset: var(--gap);
  display: flex;
  flex-wrap: wrap;

  > * {
    flex-basis: 100%;
    max-width: 100%;
  }
  
  @supports (--css: variables) {
    > *[class*="offset-"] {
      margin-left: var(--offset);
    }
  }
}

[class*="gap-xxxxs"], [class*="gap-xxxs"], [class*="gap-xxs"], [class*="gap-xs"], [class*="gap-sm"], [class*="gap-md"], [class*="gap-lg"], [class*="gap-xl"], [class*="gap-xxl"], [class*="gap-xxxl"], [class*="gap-xxxxl"], [class*="grid-gap-"], [class*="flex-gap-"] {
  margin-bottom: -0.75em;
  margin-left: -0.75em;

  > * {
    margin-bottom: 0.75em;
    margin-left: 0.75em;
  }
}

@supports (--css: variables) {
  [class*="gap-xxxxs"], [class*="gap-xxxs"], [class*="gap-xxs"], [class*="gap-xs"], [class*="gap-sm"], [class*="gap-md"], [class*="gap-lg"], [class*="gap-xl"], [class*="gap-xxl"], [class*="gap-xxxl"], [class*="gap-xxxxl"], [class*="grid-gap-"], [class*="flex-gap-"] {
    --gap: 0px;
    --offset: var(--gap);
    margin-bottom: calc(-1 * var(--gap));
    margin-left: calc(-1 * var(--gap));
  
    > * {
      margin-bottom: var(--gap);
      margin-left: var(--offset);
    }
  }

  .gap-xxxxs, .grid-gap-xxxxs, .flex-gap-xxxxs { --gap: var(--space-xxxxs); }
  .gap-xxxs, .grid-gap-xxxs, .flex-gap-xxxs    { --gap: var(--space-xxxs); }
  .gap-xxs, .grid-gap-xxs, .flex-gap-xxs       { --gap: var(--space-xxs); }
  .gap-xs, .grid-gap-xs, .flex-gap-xs          { --gap: var(--space-xs); }
  .gap-sm, .grid-gap-sm, .flex-gap-sm          { --gap: var(--space-sm); }
  .gap-md, .grid-gap-md, .flex-gap-md          { --gap: var(--space-md); }
  .gap-lg, .grid-gap-lg, .flex-gap-lg          { --gap: var(--space-lg); }
  .gap-xl, .grid-gap-xl, .flex-gap-xl          { --gap: var(--space-xl); }
  .gap-xxl, .grid-gap-xxl, .flex-gap-xxl       { --gap: var(--space-xxl); }
  .gap-xxxl, .grid-gap-xxxl, .flex-gap-xxxl    { --gap: var(--space-xxxl); }
  .gap-xxxxl, .grid-gap-xxxxl, .flex-gap-xxxxl { --gap: var(--space-xxxxl); }
}

@function round-width ($i) {
  //function used to round width to a number with 2 decimal places - used for IE fallback
  $width : floor(100% * $i * 100/ $grid-columns) / 100;
  @return $width;
}

@mixin autoSizedColumn {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

.col { // auto-sized column
  @include autoSizedColumn;
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex-basis: calc( #{round-width($i)} - 0.01px - var(--gap, 0.75em));
    max-width: calc( #{round-width($i)} - 0.01px - var(--gap, 0.75em));
  }
}

.col-content {
  flex-basis: initial;
  max-width: initial;
}

@for $i from 1 through $grid-columns - 1 {
  .offset-#{$i} {
    --offset: calc(#{round-width($i)} + var(--gap, 0.75em));
  }
}

@each $breakpoint, $value in $breakpoints {
  @include breakpoint(#{$breakpoint}) {
    .col\@#{$breakpoint} { // auto-sized column
      @include autoSizedColumn;
    }
  
    @for $i from 1 through $grid-columns {
      .col-#{$i}\@#{$breakpoint} {
        flex-basis: calc( #{round-width($i)} - 0.01px - var(--gap, 0.75em));
        max-width: calc( #{round-width($i)} - 0.01px - var(--gap, 0.75em));
      }
    }
  
    .col-content\@#{$breakpoint} {
      flex-basis: initial;
      max-width: initial;
    }
  
    @for $i from 1 through $grid-columns - 1 {
      .offset-#{$i}\@#{$breakpoint} {
        --offset: calc(#{round-width($i)} + var(--gap, 0.75em));
      }
    }
  
    @supports (--css: variables) {
      .gap-xxxxs\@#{$breakpoint} { --gap: var(--space-xxxxs); }
      .gap-xxxs\@#{$breakpoint}  { --gap: var(--space-xxxs); }
      .gap-xxs\@#{$breakpoint}   { --gap: var(--space-xxs); }
      .gap-xs\@#{$breakpoint}    { --gap: var(--space-xs); }
      .gap-sm\@#{$breakpoint}    { --gap: var(--space-sm); }
      .gap-md\@#{$breakpoint}    { --gap: var(--space-md); }
      .gap-lg\@#{$breakpoint}    { --gap: var(--space-lg); }
      .gap-xl\@#{$breakpoint}    { --gap: var(--space-xl); }
      .gap-xxl\@#{$breakpoint}   { --gap: var(--space-xxl); }
      .gap-xxxl\@#{$breakpoint}  { --gap: var(--space-xxxl); }
      .gap-xxxxl\@#{$breakpoint} { --gap: var(--space-xxxxl); }
      .gap-0\@#{$breakpoint}     { --gap: 0px; }
    }
  }
}

// --------------------------------

// CSS Grid Layout fallback

// --------------------------------

@mixin gridFallback($gap: null) {
  display: flex;
  flex-wrap: wrap;
  @if( $gap == null ) {
    $gap: var(--space-md);
  }

  margin: calc(#{$gap} * -1) 0 0 calc(#{$gap} * -1);

  > * {
    padding: #{$gap} 0 0 #{$gap};
    background-clip: content-box;
  }

  @supports (grid-area: auto) {
    margin: 0;

    > * {
      padding: 0;
      max-width: none!important;
    }
  }
}

@mixin column($width) {
  @if unit($width) != '%' {
    $width: $width * 100%;
  }
  flex-basis: #{$width};
  max-width: #{$width};
}